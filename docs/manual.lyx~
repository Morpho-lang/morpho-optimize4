#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{titlesec}
\titleformat{\part}
  {\normalfont\sffamily\huge}
  {\partname\ \thepart}{1em}{}
\titleformat{\chapter}[display]
  {\normalfont\sffamily\huge}
  {\chaptertitlename\ \thechapter}{20pt}{\Huge}
\titleformat{\section}
  {\normalfont\sffamily\Large}
  {\thesection}{1em}{}
\titleformat{\subsection}
  {\normalfont\sffamily\large}
  {\thesection}{1em}{}
\titleformat{\subsubsection}
  {\normalfont\sffamily\normalsize}
  {\thesection}{1em}{}

\usepackage{newtxtext}
\usepackage{titletoc}

\contentsmargin[1cm]{0cm}

\titlecontents{part}[0em]{\vskip12pt\bfseries\sffamily}
{\thecontentslabel\enspace}
{\hspace{1.05em}}
{ \hfill\contentspage}[\vskip 6pt]

\titlecontents{chapter}[0em]{\vskip12pt\bfseries\sffamily}
{\thecontentslabel\enspace}
{\hspace{1.05em}}
{ \hfill\contentspage}[\vskip 6pt]

\titlecontents{section}[1em]{\sffamily}
{\thecontentslabel\enspace}
{}
{\titlerule*[1pc]{.}\quad\contentspage}[\vskip 4pt]

\titlecontents{subsection}[2.7em]{\sffamily}
{\thecontentslabel\enspace}
{}
{\titlerule*[1pc]{.}\quad\contentspage}[\vskip 3pt]

\usepackage{listings}
\usepackage{color}
\definecolor{ltgry}{rgb}{0.95,0.95,0.95}
\definecolor{purplekeywords}{rgb}{0.75,0,0.75}
\definecolor{greycomments}{rgb}{0.5,0.5,0.5}
\definecolor{redstrings}{rgb}{0.64,0.08,0.08}
\lstset{backgroundcolor=\color{ltgry}}

\lstset{columns=fixed, basicstyle=\ttfamily, basewidth=0.55em}

\usepackage{pifont}
\newcommand{\xmark}{\ding{55}}

\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Baskerville"
\font_sans "default" "Helvetica"
\font_typewriter "default" "Andale Mono"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 80 80
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 2
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language=Java,showspaces=false,showtabs=false,breaklines=true,showstringspaces=false,breakatwhitespace=true,escapeinside={(*@}{@*)},commentstyle={\color{greycomments}},keywordstyle={\color{purplekeywords}\bfseries},stringstyle={\color{redstrings}},basicstyle={\ttfamily},morekeywords={ var, fn, print,in }"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Optimize4: An optimization package for 
\emph on
morpho
\end_layout

\begin_layout Chapter
Overview
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/structure.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Classes in the optimize4 package 
\series default
and how they interact.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
optimize4
\family default
 package faciliates the solution of optimization problems, with a particular
 focus on the shape optimization problems for which 
\emph on
morpho
\emph default
 was designed.
 The design is intended to be flexible, enabling customization of the choice
 of algorithm and easy incorporation of new algorithms by the developer
 or user.
 To use the package, simply import it into your 
\emph on
morpho
\emph default
 program as usual:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import optimize4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This imports several subsidiary modules, which provide three main kinds
 of class that work together (Fig.
 1): 
\end_layout

\begin_layout Description
OptimizationProblem classes are used to describe the problem to be solved.
 Functionals may be added to the problem either as energies or constraints
 with set target values.
 
\end_layout

\begin_layout Description
OptimizationAdapter classes provide a uniform interface for optimization
 targets, enabling the setting and getting parameters as well as calculating
 the value of the objective function, constraints and gradients.
 Adapters are provided, for example, to take an 
\emph on
OptimizationProblem
\emph default
 and a target object, such as a Mesh or a Field, and compute the value of
 the objective function and gradients with respect to the target.
 Adapters can also be used to transform one type of problem to another,
 e.g.
 a constrained problem to an unconstrained problem, facilitating the use
 of different optimization algorithms.
 
\end_layout

\begin_layout Description
OptimizationController classes objects implement an optimization algorithm
 or a useful subcomponent.
 Controllers work by calling appropriate methods on associated OptimizationAdapt
ers to obtain value, gradient and even Hessians in some cases, and direct
 how parameters are to be adjusted as the algorithm proceeds.
 
\end_layout

\begin_layout Chapter
Using optimize
\end_layout

\begin_layout Standard
To establish notation, the goal of the 
\family typewriter
optimize4
\family default
 package is to solve the following standard problem, 
\begin_inset Formula 
\begin{align}
\min_{\mathbf{x}}f(\mathbf{x})\nonumber \\
s.t.\ \mathbf{c}(\mathbf{x}) & =0\nonumber \\
\mathbf{d}(\mathbf{x}) & \ge0\label{eq:Problem}
\end{align}

\end_inset

where 
\begin_inset Formula $f(\mathbf{x})$
\end_inset

 is the objective function and 
\begin_inset Formula $\mathbf{x}$
\end_inset

 are its 
\begin_inset Formula $N$
\end_inset

 parameters.
 There are a total of 
\begin_inset Formula $M$
\end_inset

 constraints, expressed as 
\begin_inset Formula $\mathbf{c}(\mathbf{x})$
\end_inset

 a vector of 
\begin_inset Formula $M_{=}$
\end_inset

 equality constrained functions, and 
\begin_inset Formula $\mathbf{d}$
\end_inset

 a vector of 
\begin_inset Formula $M_{\neq}=M-M_{=}$
\end_inset

 inequality constrained functions.
 We adopt the sign convention that the inequality constraint functions 
\begin_inset Formula $\mathbf{d}$
\end_inset

 are positive in the feasible region.
\end_layout

\begin_layout Standard
We shall use the subscript notation 
\begin_inset Formula $\mathbf{x}_{k}$
\end_inset

 to refer to the value of a quantity at a particular iteration 
\begin_inset Formula $k$
\end_inset

.
 If 
\begin_inset Formula $\mathbf{c}$
\end_inset

 and 
\begin_inset Formula $\mathbf{d}$
\end_inset

 are empty vectors the problem is said to be 
\emph on
unconstrained
\emph default
.
 If constraints are present, the set 
\begin_inset Formula $\mathbf{x}\in\Omega$
\end_inset

 compatible with the constraints is called the 
\emph on
feasible
\emph default
 set.
 
\end_layout

\begin_layout Standard
We shall also use consistent notation for the gradient of the objective
 function, 
\begin_inset Formula 
\[
\mathbf{g}=\frac{\partial f}{\partial x_{i}}
\]

\end_inset

and its hessian, 
\begin_inset Formula 
\[
\mathbf{H}=H_{ij}=\frac{\partial^{2}f}{\partial x_{i}\partial x_{j}}
\]

\end_inset

as well as the 
\begin_inset Formula $N\times N_{c}$
\end_inset

 matrix of the gradients of constraints, 
\begin_inset Formula 
\[
\mathbf{C}=C_{ij}=\frac{\partial c_{j}}{\partial x_{i}},\ \mathbf{D}=D_{ij}=\frac{\partial d_{j}}{\partial x_{i}}
\]

\end_inset


\end_layout

\begin_layout Standard

\emph on
[More to go here]
\end_layout

\begin_layout Chapter
OptimizationProblem
\end_layout

\begin_layout Standard
An OptimizationProblem is a container object that describes an optimization
 problem using Functional objects, which can be used as part of the objective
 function (these are referred to as 
\begin_inset Quotes eld
\end_inset

energies
\begin_inset Quotes erd
\end_inset

), or as constraints.
 Earlier versions of 
\emph on
morpho
\emph default
 provided the same user interface, which has been adopted and integrated
 into the 
\family typewriter
optimize4
\family default
 package.
 Creation of an OptimizationProblem is described in the main 
\emph on
morpho
\emph default
 manual; we provide a simple example below appropriate for minimizing the
 length of a closed loop at constant enclosed area:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var problem = OptimizationProblem(mesh)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

problem.addenergy(Length())
\end_layout

\begin_layout Plain Layout

problem.addconstraint(EnclosedArea())
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
OptimizationAdapters
\end_layout

\begin_layout Standard
OptimizationAdapter and its subclasses exist to provide a uniform interface
 for OptimizationControllers to call.
 This design enables optimization algorithms to be separated from the task
 of evaluating quantities like gradients and widens the range of things
 that could be optimized—all that's needed to optimize an arbitrary object
 that depends on parameters is to create an appropriate OptimizationAdapter.
 
\end_layout

\begin_layout Standard
Further, adapter objects can be chained together to create useful effects.
 An adapter such as PenaltyAdapter converts a constrained problem to an
 unconstrained problem, for example, facilitating use of a different set
 of OptimizationControllers.
 Appropriate adapters can also be used within a broader algorithm to solve
 a subproblem of interest, for example performing a linesearch on an augmented
 objective function rather than the original one.
 
\end_layout

\begin_layout Section
OptimizationAdapter interface
\end_layout

\begin_layout Standard
An adapter 
\series bold
must
\series default
 implement the following methods,
\end_layout

\begin_layout Description
set(x) Sets the current value of the parameters to 
\begin_inset Formula $x$
\end_inset

, which should be supplied as a column vector.
 
\end_layout

\begin_layout Description
get() Returns the current value of the parameters as a column vector.
 
\end_layout

\begin_layout Description
value() Returns the value of the objective function.
 
\end_layout

\begin_layout Description
gradient() Returns the gradient of the objective function at the current
 parameters as a column vector.
 
\end_layout

\begin_layout Description
hessian() Returns the hessian of the objective function at the current parameter
s as a column vector, or 
\family typewriter
nil
\family default
 if a hessian is not available.
\end_layout

\begin_layout Description
countConstraints() Returns the total number of constraints present 
\begin_inset Formula $M=M_{=}+M_{\neq}$
\end_inset

.
\end_layout

\begin_layout Description
countEqualityConstraints() Returns the number of equality constraints 
\begin_inset Formula $M_{=}$
\end_inset

.
\end_layout

\begin_layout Description
countInequalityConstraints() Returns the number of equality constraints
 
\begin_inset Formula $M_{\neq}$
\end_inset

.
\end_layout

\begin_layout Description
constraintValue() Returns a List containing the value(s) of any constraints.
 
\end_layout

\begin_layout Description
constraintGradient() Returns a List containing the gradient(s) of any constraint
s as column vectors.
\end_layout

\begin_layout Description
constraintHessian() Returns a List containing the hessian(s) of any constraints.
\end_layout

\begin_layout Section
Available adapters
\end_layout

\begin_layout Subsection
DelegateAdapter
\end_layout

\begin_layout Standard
A DelegateAdapter is initialized with a given adapter.
 The DelegateAdapter implements the OptimizationAdapter interface, but simply
 redirects all of method calls to the enclosed adapter.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
FunctionAdapter
\end_layout

\begin_layout Standard
A FunctionAdapter provides an interface to minimize a callable 
\emph on
morpho
\emph default
 object, i.e.
 a function, invocation or closure, with respect to its positional parameters.
 To miminize a simple quadratic function 
\begin_inset Formula $(x-1/2)^{2}+(y-1)^{2}+\frac{1}{4}xy$
\end_inset

, for example, 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fn func(x, y) {
\end_layout

\begin_layout Plain Layout

    return (x-0.5)^2 + (y-1)^2 + 0.25*x*y
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var adapt = FunctionAdapter(func, start=Matrix(2)) // Start from (0,0)
\end_layout

\end_inset

You can specify the starting point through the 
\family typewriter
start
\family default
 optional parameter in the constructor, and provide functions that return
 the gradient and/or hessian via 
\family typewriter
gradient
\family default
 and 
\family typewriter
hessian
\family default
.
 If these are not provided, FunctionAdapter will compute approximations
 using finite differences.
 
\end_layout

\begin_layout Standard
If you want to optimize a callable object with respect to its optional parameter
s, you can wrap it in another function or closure:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fn wrapper(x, y) {
\end_layout

\begin_layout Plain Layout

    return myfunc(a=x, b=y)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var adapt = FunctionAdapter(wrapper, start=Matrix(2)) // Start from (0,0)
\end_layout

\end_inset

OptimizationControllers
\end_layout

\begin_layout Standard
In this chapter we review optimization algorithms available in the package,
 which are implemented as OptimizationControllers, with enough context to
 understand their relative utility.
 For a deeper understanding of these algorithms, the reader should consult
 standard textbooks on optimization theory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recommended texts include Nocedal and Wright, 
\begin_inset Quotes eld
\end_inset

Numerical Optimization
\begin_inset Quotes erd
\end_inset

 (Springer); Boyd and Vandenberghe 
\begin_inset Quotes eld
\end_inset

Convex Optimization
\begin_inset Quotes erd
\end_inset

 (Cambridge University Press).
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
New OptimizationControllers can easily be defined, including ones created
 in extensions linking to external optimization libraries.
\end_layout

\begin_layout Chapter
OptimizationControllers
\end_layout

\begin_layout Standard
In this chapter we review optimization algorithms available in the package,
 which are implemented as OptimizationController objects, with enough context
 to understand their relative utility.
 For a deeper understanding of these algorithms, the reader should consult
 standard textbooks on optimization theory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recommended texts include Nocedal and Wright, 
\begin_inset Quotes eld
\end_inset

Numerical Optimization
\begin_inset Quotes erd
\end_inset

 (Springer); Boyd and Vandenberghe 
\begin_inset Quotes eld
\end_inset

Convex Optimization
\begin_inset Quotes erd
\end_inset

 (Cambridge University Press).
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
New classes that implement OptimizationController protocols can easily be
 defined, including ones created in extensions linking to external optimization
 libraries.
\end_layout

\begin_layout Section
Reporting
\end_layout

\begin_layout Standard
OptimizationController objects support controllable levels of output.
 To set, initialize the OptimizationController with the optional parameter
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

verbosity
\end_layout

\end_inset

 with one of the following options, supplied as a String
\end_layout

\begin_layout Description
silent Suppresses all output except errors.
\end_layout

\begin_layout Description
quiet Suppresses all output except errors and warnings.
\end_layout

\begin_layout Description
normal Report progress of the controller, but suppress additional output
\end_layout

\begin_layout Description
verbose Display all available information
\end_layout

\begin_layout Section
Interface
\end_layout

\begin_layout Standard
An OptimizationController is a base class for iterative optimization algorithms.
 The user performs optimization by calling the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

optimize
\end_layout

\end_inset

 method with a maximum number of iterations.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
State {start()}
\end_layout

\begin_layout Plain Layout


\backslash
State {record()}
\end_layout

\begin_layout Plain Layout


\backslash
For{$i 
\backslash
gets 1$ to $N_{iter}$} 
\end_layout

\begin_layout Plain Layout

	
\backslash
If{hasConverged()} 
\end_layout

\begin_layout Plain Layout

		
\backslash
State 
\backslash
textbf{break}
\end_layout

\begin_layout Plain Layout

	
\backslash
EndIf
\end_layout

\begin_layout Plain Layout

	 
\backslash
State {iterate()}
\end_layout

\begin_layout Plain Layout

	 
\backslash
State {report(i)}
\end_layout

\begin_layout Plain Layout

	 
\backslash
State {record()}
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Generic-optimization-algorithm"

\end_inset

Generic optimization algorithm
\end_layout

\end_inset


\end_layout

\end_inset

The generic optimization sequence is shown in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Generic-optimization-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Particular algorithms are defined by subclassing OptimizationController
 and implementing the below methods, all of which do nothing in the base
 class unless otherwise indicated.
 
\end_layout

\begin_layout Description
start() Called once by 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

optimize
\end_layout

\end_inset

 to performs any initialization at the beginning of optimization.
 
\end_layout

\begin_layout Description
begin() Calculate any necessary quantities at the beginning of each iteration.
\end_layout

\begin_layout Description
step() Perform the optimization step
\end_layout

\begin_layout Description
next() Calculate updated information at the end of the iteration.
 
\end_layout

\begin_layout Description
iterate() Calls 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

begin
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

step
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

next
\end_layout

\end_inset

 in turn.
\end_layout

\begin_layout Description
record() Records information about the iteration.
 By default, the value of the objective functional is stored after each
 iteration step.
 
\end_layout

\begin_layout Standard

\series medium
The OptimizationController base class provides two further methods that
 form part of the generic optimization algorithm:
\end_layout

\begin_layout Description
hasConverged() Performs a convergence check as described in subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Convergence-criteria"
plural "false"
caps "false"
noprefix "false"

\end_inset

 below.
 
\end_layout

\begin_layout Description
report(i) Reports information to the user, including the value of the optimizati
on algorithm
\end_layout

\begin_layout Section
Convergence criteria
\begin_inset CommandInset label
LatexCommand label
name "sec:Convergence-criteria"

\end_inset


\end_layout

\begin_layout Standard
The base OptimizationController class provides two basic convergence criteria,
 that are controlled by the properties 
\family typewriter
gradtol
\family default
 and 
\family typewriter
etol
\family default
.
\end_layout

\begin_layout Enumerate
The first criterion is to examine the norm of the gradient of the objective
 function,
\begin_inset Formula 
\[
\left|g_{k}\right|<\texttt{gradtol}
\]

\end_inset

where 
\family typewriter
gradtol
\family default
 is 
\begin_inset Formula $1\times10^{-6}$
\end_inset

 by default.
 
\end_layout

\begin_layout Enumerate
The second is to monitor the change in the value of the objective function
 in successive iterations of the algorithm, 
\begin_inset Formula $f_{k}$
\end_inset

 and 
\begin_inset Formula $f_{k+1}$
\end_inset

 and stop if, 
\begin_inset Formula 
\[
\begin{cases}
\left|f_{k+1}-f_{k}\right|<\texttt{etol}, & \left|f_{k+1}\right|<\texttt{etol}\\
\left|f_{k+1}-f_{k}\right|<\texttt{etol}\left|f_{k+1}\right|, & \text{otherwise}
\end{cases}
\]

\end_inset

i.e.
 ensuring a relative tolerance of 
\begin_inset Formula $\texttt{etol}$
\end_inset

 unless 
\begin_inset Formula $f$
\end_inset

 itself is nearly zero, in which case 
\begin_inset Formula $\texttt{etol}$
\end_inset

 is an absolute tolerance.
 The value of 
\family typewriter
etol
\family default
 is 
\begin_inset Formula $1\times10^{-8}$
\end_inset

 by default.
 
\end_layout

\begin_layout Standard
The method 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

hasConverged
\end_layout

\end_inset

 returns 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

true
\end_layout

\end_inset

 if either of these convergence checks are met.
 
\end_layout

\end_body
\end_document
