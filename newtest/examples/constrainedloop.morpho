// Loop problem with local inequality constraints

import meshtools 
import optimize4
import plot 

class ConstrainedLoop {
  init(Np=24, L=0.5) {
    self.Np = Np
    self.L = L
    self.mesh = nil 
    self.problem = nil 
  }

  initialMesh() { 
    // Build mesh 
    self.mesh = LineMesh(fn (u) [cos(u), sin(u)], -Pi...Pi:Pi/self.Np, closed=true) 
    self.minit = self.mesh.clone()
    return self.mesh
  }

  initialField() { }

  buildProblem() { 
    // Set up a demo problem 
    self.problem = OptimizationProblem(self.mesh)
    self.problem.addenergy(Length())
    self.problem.addenergy(EquiElement(), prefactor=0.1)
    self.problem.addconstraint(AreaEnclosed())

    var lsupper = ScalarPotential(fn (x,y) self.L-y)
    var lslower = ScalarPotential(fn (x,y) y+self.L)
    self.problem.addlocalconstraint(lsupper, onesided=true)
    self.problem.addlocalconstraint(lslower, onesided=true)
    return self.problem
  }

  buildAdapter() { 
    self.adapter = ProblemAdapter(self.problem, self.mesh) 
    return self.adapter
  }

  build() { // Setup the problem and return an Adapter
    self.initialMesh()
    self.initialField()
    self.buildProblem()
    return self.buildAdapter()
  }

  visualize() { 
    Show(plotmesh(self.mesh, grade=[0,1]))
  }
}
