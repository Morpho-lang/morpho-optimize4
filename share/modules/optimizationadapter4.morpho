/* ************************************************************
 * OptimizationAdapter 
 * ************************************************************ */ 

/* --------------------------
 * Errors
 * -------------------------- */ 

var _OptConsCountErr = Error("OptConsCount", "More equality constraints specified than provided.")
var _OptUnConsErr = Error("OpUncons", "Problem is unconstrained; this adapter is intended for constrained problems.")
var _OptNoHessErr = Error("OptNoHess", "Method requires a hessian.")

var _OptNoActiveFuncErr = Error("OptNoActiveFunc", "Problem has no active functionals.")
var _OptTrgtLstEmptyErr = Error("OptTrgtLstEmpty", "List of optimization targets is empty.")

/* -------------------------
 * Utility Functions
 * ------------------------- */

fn _columnize(matrix) { // Reshape a rectangular matrix into a column matrix 
  var dim = matrix.dimensions() 
  matrix.reshape(dim[0]*dim[1],1)
}

fn _decolumnize(matrix, dim) { // Reshape a matrix from a column matrix to a rectangular matrix
  matrix.reshape(dim[0], dim[1])
}

/* --------------------------
 * OptimizationAdapter class
 * -------------------------- */ 

/* OptimizationAdapters provide a common interface that enables optimization algorithms to obtain 
   necessary information about the an optimization problem. */

class OptimizationAdapter {
  init(target) { self.target = target }

  set(x) { return nil }               // Sets the parameters 
  get() { return 0 }                  // Returns current value of the parameters

  value() { return 0 }                // Returns the current value of the objective function at the current parameters
  gradient() { return nil }           // Returns the gradient of the objective function at the current parameters as a column vector
  hessian() { return nil }            // (Optional) Returns the hessian of the objective function at the current parameters as a matrix

  countConstraints() { return 0 }     // Returns number of constraints present
  countEqualityConstraints() { return 0 } // Returns number of equality constraints present
  countInequalityConstraints() {      // Returns number of inequality constraints present
    return self.countConstraints() - self.countEqualityConstraints() 
  } 

  constraintValue() { return nil }    // Returns the value(s) of any constraints as a list of numbers and vectors
  constraintGradient() { return nil } // Returns the gradient(s) of any constraints as a list of vectors or matrices
  constraintHessian() { return nil }  // Returns the hessian(s) of any constraints as a list of matrices, or sublists
}

/* --------------------------
 * DelegateAdapter class
 * -------------------------- */ 

/** A delegate adapter fully implements the adapter protocol, but instead passes
    method calls on to a second adapter. Useful as a base class for adapters 
    that are intended to work with other adapters */

class DelegateAdapter is OptimizationAdapter {
  init(adapter) {
    self.adapter = adapter
  }

  set(x) { self.adapter.set(x) }
  get() { return self.adapter.get() }

  value() { return self.adapter.value() }
  gradient() { return self.adapter.gradient() }
  hessian() { return self.adapter.hessian() }

  countConstraints() { return self.adapter.countConstraints() }
  countEqualityConstraints() { return self.adapter.countEqualityConstraints() }
  countInequalityConstraints() { return self.adapter.countInequalityConstraints() }

  constraintValue() { return self.adapter.constraintValue() }
  constraintGradient() { return self.adapter.constraintGradient() }
  constraintHessian() { return self.adapter.constraintHessian() } 
}

/* --------------------------
 * ProxyAdapter class
 * -------------------------- */ 

/** A ProxyAdapter calls the methods of a provided adapter, but caches values
    to prevent multiple evaluations. Can provide a report of the number of 
    evaluations of each quantity. */

class ProxyAdapter is DelegateAdapter {
  init(adapter) {
    super.init(adapter)
    self.reset() 
    self.count = [0,0,0,0,0,0]
  }

  reset() {
    self._value = nil 
    self._gradient = nil 
    self._hessian = nil 
    self._constraintValue = nil 
    self._constraintGradient = nil 
    self._constraintHessian = nil 
  }

  set(x) { 
    self.adapter.set(x) 
    self.reset() 
  }

  get() { return self.adapter.get() }

  _compute(prop, func, counter) {
    if (!self[prop]) { 
      self.setindex(prop, func())
      self.count[counter]+=1
    }
    return self[prop]
  }

  value()    { return self._compute("_value", self.adapter.value, 0) }
  gradient() { return self._compute("_gradient", self.adapter.gradient, 1) }
  hessian() { return self._compute("_hessian", self.adapter.hessian, 2) }

  constraintValue() { return self._compute("_constraintValue", self.adapter.constraintValue, 3) }
  constraintGradient() { return self._compute("_constraintGradient", self.adapter.constraintGradient, 4) }
  constraintHessian() { return self._compute("_constraintHessian", self.adapter.constraintHessian, 4) }

  countEvals() { // Returns the evaluation count
    return self.count 
  }

  report() { // Reports the number of calls 
    var out = "" 
    var desc = ("Fn", "Grad", "Hess", "Cons.", "Cons. grad", "Cons. hess")

    for (count, k in self.count) {
      if (count>0) {
        if (k>0) out+=", "
        out+="${desc[k]} evals: ${count}"
      }
    }

    print out 
  }
}

/* -------------------------
 * FunctionAdapter 
 * ------------------------- */

/* Adapts a provided function (and an optional gradient and hessian) 
   to the OptimizationAdapter interface */

var _epsfd=(1e-16)^(1/3) // Optimal relative stepsize for cell centered gradient
var _epshess=(1e-16)^(1/4) // Optimal relative stepsize for cell centered hessian

class FunctionAdapter is OptimizationAdapter {
  init(target, gradient=nil, hessian=nil, start=nil, 
               constraints=nil, constraintgradients=nil, constrainthessians=nil,
               equalitycount=nil) {
    super.init(target)
    self.x = start
    
    self.gradfn = gradient 
    if (!gradient) self.gradfn = self._numericalgrad(self.target) // Use FD if no grad provided

    self.hessianfn = hessian
    if (!hessian) self.hessianfn = self._numericalhessian(self.target) // Use FD if no hessian provided

    self.constraints = constraints

    self.constraintcount = 0 
    if (constraints) self.constraintcount = self.constraints.count()
    self.equalitycount = self.constraintcount // By default, all constraints are equality constraints
    if (equalitycount) self.equalitycount = equalitycount

    if (self.equalitycount>self.constraintcount) _OptConsCountErr.throw()

    self.constraintgradfn = constraintgradients
    if (self.constraints && !self.constraintgradfn) {
      var lst = []
      for (c in self.constraints) lst.append(self._numericalgrad(c))
      self.constraintgradfn = lst 
    }

    self.constrainthessianfn = constrainthessians
    if (self.constraints && !self.constrainthessianfn) {
      var lst = []
      for (c in self.constraints) lst.append(self._numericalhessian(c))
      self.constrainthessianfn = lst 
    }
  }

  _listify(x) { // Converts an enumerable to a list
    var l = []
    for (e in x) l.append(e)
    return l 
  }

  _stepsize(eps, x) { // Select stepsize for finite differences
    var h=eps
    var xx=abs(x)
    if (xx>1) h*=xx // Scale

    var temp = x+h  // Ensure we obtain an FP representable number
    return temp - x 
  }

  _numericalgrad(f) { // Construct a numerical gradient as a closure 
    fn numericalgradfn(...x) {
      var n = x.count()
      var grad = Matrix(n)

      for (var i=0; i<n; i+=1) {
        var x0 = x[i]
        var eps = self._stepsize(_epsfd, x0)
        x[i]=x0+eps
        var fr = apply(f, x)
        x[i]=x0-eps
        var fl = apply(f, x)
        grad[i]=(fr-fl)/(2*eps)
      }

      return grad 
    }
    return numericalgradfn
  }

  _numericalhessian(f) {
    fn numericalhessianfn(...x) {
      var n = x.count()
      var hess = Matrix(n,n)
      var f0 = apply(f, x)

      for (var i=0; i<n; i+=1) {
        var x0 = x[i]
        var epsx = self._stepsize(_epsfd, x0)

        // Diagonal entries see Abramowitz and Stegun 1972, p. 884, 25.3.23, O(h^2)
        x[i]=x0+epsx
        var fr = apply(f, x)
        x[i]=x0-epsx
        var fl = apply(f, x)
        x[i]=x0

        hess[i,i]=(fr+fl-2*f0)/(epsx*epsx)

        // Off diagonal entries Abramowitz and Stegun 1972, p. 884, 25.3.26 O(h^2)
        for (var j=0; j<i; j+=1) {
          var y0 = x[j]            
          var epsy = self._stepsize(_epsfd, y0)

          x[i]=x0+epsx; x[j]=y0+epsy
          var frr = apply(f, x)
          x[i]=x0-epsx; x[j]=y0-epsy
          var fll = apply(f, x)
          x[i]=x0-epsx; x[j]=y0+epsy
          var flr = apply(f, x)
          x[i]=x0+epsx; x[j]=y0-epsy
          var frl = apply(f, x)
          x[i]=x0; x[j]=y0

          hess[i,j]=hess[j,i]=(frr+fll-flr-frl)/(epsx*epsy)/4
        }
      }

      return hess  
    } 
    return numericalhessianfn 
  }

  set(x) { self.x = x }
  get() { return self.x }

  value() { return apply(self.target, self._listify(self.x)) }
  gradient() { return apply(self.gradfn, self._listify(self.x)) }
  hessian() { return apply(self.hessianfn, self._listify(self.x)) }

  countConstraints() { return self.constraintcount }
  countEqualityConstraints() { return self.equalitycount }

  constraintMap(list) {
    var val = []
    for (c, k in list) val.append( apply(c, self._listify(self.x)) )
    return val 
  } 

  constraintValue() { 
    if (!self.constraints) return nil 
    return self.constraintMap(self.constraints)
  }   

  constraintGradient() { 
    if (!self.constraints) return nil 
    return self.constraintMap(self.constraintgradfn)
  }

  constraintHessian() { 
    if (!self.constraints) return nil 

    if (!self.constraints) return nil 
    return self.constraintMap(self.constrainthessianfn)
  }
}

/* -------------------------
 * PenaltyAdapter
 * ------------------------- */

/* Converts a constrained optimization problem into an unconstrained one */

class PenaltyAdapter is OptimizationAdapter {
  init(adapter, penalty=1) { 
    self.adapter = adapter
    self.penalty = penalty 
  }

  setpenalty(penalty) { self.penalty = penalty }
  penalty() { return self.penalty }

  set(x) { self.adapter.set(x) }
  get() { return self.adapter.get() }

  _counteq(cv) { // Counts the number of equality constraints
    var nc = self.adapter.countEqualityConstraints()
    var neq = 0
    for (c, k in cv) {
      if (k>=nc) break
      if (ismatrix(c)) neq+=c.count()
      else neq+=1
    }  
    return neq
  }

  _flatten(v) {
    var l = []
    for (c in v) {
      if (ismatrix(c)) for (x in c) l.append(x)
      else l.append(c)
    }
    return Matrix(l)
  } 

  _checkineq(c, neq) {
    for (k in neq...c.count()) {
      if (c[k]>0) c[k]=0
    }
  }

  constraintVector() {
    var cv = self.adapter.constraintValue()

    if (!cv) _OptUnConsErr.warning()

    var v = self._flatten(cv)
    var neq = self._counteq(cv)
    self._checkineq(v, neq)

    return v 
  }

  value() { // Q = f + mu*c^2 + mu*d-^2
    var f = self.adapter.value() 
    var v = self.constraintVector() 
    if (v) f += self.penalty * v.inner(v)

    return f
  }

  gradient() { // grad Q = grad f + 2*mu*g*grad g
    var grad = self.adapter.gradient() 
    var v = self.constraintVector()   

    if (v) {
      var dg = self.adapter.constraintGradient()   
      var c = Matrix([dg])

      grad+=2*self.penalty*c*v  
    } 
  
    return grad
  }

  hessian() { // hessian Q = hessian f + 2*mu*g*hessian g + 2*mu*(dg \outer dg)
    var hess = self.adapter.hessian() 
    if (!hess) _OptNoHessErr.throw() 

    var v = self.constraintVector() 
    
    if (v) {
      var dg = self.adapter.constraintGradient()  
      var hessg = self.adapter.constraintHessian() 

      for (vk, k in v) {
        if (abs(vk)==0) continue
        if (!hessg[k]) _OptNoHessErr.throw() 

        hess+=2*self.penalty*(vk*hessg[k] + dg[k].outer(dg[k]))
      }
    }

    return hess
  }
}

/* -------------------------
 * MeshAdapter 
 * ------------------------- */

class MeshAdapter is OptimizationAdapter {
  init(problem, target) {
    super.init(target)
    self.problem = problem 
    if (islist(target) && self.target.count()==0) _OptTrgtLstEmptyErr.throw()
    if (!islist(self.problem.energies) || self.problem.energies.count()==0) _OptNoActiveFuncErr.throw()
  }

  set(x) { // x is a column matrix 
    var mat = self.target.vertexmatrix()
    var dim = mat.dimensions() 
    _columnize(mat)
    mat.assign(x)
    _decolumnize(mat, dim)
    return nil  
  }

  get() { // grabs the mesh 
    var mat = self.target.vertexmatrix().clone()
    _columnize(mat)
    return mat 
  }

  // Obtain energies and constraints from the problem 
  energies() { return self.problem.energies } 
  constraints() { return self.problem.constraints }
  localConstraints() { return self.problem.localconstraints }

  valueForFunctional(func) { // Calculates the value of a given Functional object 
    var val
    if (func.selection) {
      val=func.functional.total(self.target, func.selection)
    } else {
      val=func.functional.total(self.target)
    }
    if (func.prefactor) val*=func.prefactor
    return val
  }

  integrandForFunctional(func) { // Calculates the value of a given Functional object 
    var val
    if (func.selection) {
      val=func.functional.integrand(self.target, func.selection)
    } else {
      val=func.functional.integrand(self.target)
    }
    if (func.prefactor) val*=func.prefactor
    return val
  }

  gradientForFunctional(func) { 
    var val
    if (func.selection) {
      val=func.functional.gradient(self.target, func.selection)
    } else {
      val=func.functional.gradient(self.target)
    }
    if (func.prefactor) val*=func.prefactor
    return val
  }

  value() { 
    var energy = 0
    for (en in self.energies()) energy+=self.valueForFunctional(en)
    return energy
  }

  gradient() {
    var grad 
    for (en in self.energies()) {
      grad+=self.gradientForFunctional(en)
    }
    _columnize(grad)
    return grad
  }

  countEqualityConstraints() { 
    return self.constraints().count()
  }

  countInequalityConstraints() { 
    return self.localConstraints().count()
  }

  countConstraints() {
    return self.countEqualityConstraints() + self.countInequalityConstraints()
  }

  _globalConstraintValue() {
    var cval=[]
    for (cons in self.constraints()) {
      var val = self.valueForFunctional(cons)
      if (cons.has("target")) val-=cons.target

      cval.append(val)
    }
    return cval
  }

  _reduceIntegrandWithSelection(val, sel) { // Reduces an integrand using a selection
    var l = []
    for (id in sel.idlistforgrade(0)) { // TODO: Handle non-point constraints
      l.append(val[id])
    }  
    return Matrix(l) 
  } 

  _zeroInactiveVal(val) { // Zero out any constraints that are in the feasible region
    for (v, k in val) if (v>0) val[k]=0
  }

  _localConstraintValue() {
    var cval=[]
    for (cons in self.localConstraints()) { 
      var val = self.integrandForFunctional(cons).transpose() 
      if (cons.has("target")) val-=cons.target
      if (cons.onesided) self._zeroInactiveVal(val)
      if (cons.selection) val = self._reduceIntegrandWithSelection(val, cons.selection)

      cval.append(val)
    }
    return cval
  }

  constraintValue() {
    return self._globalConstraintValue().join(self._localConstraintValue())
  }

  _localConstraintGradient(cons) {
    var grad = cons.functional.gradient(self.target)
    var dim = grad.dimensions()
    var ndof = dim[0], ncol = dim[1]
    var val
    if (cons.onesided) val = self.integrandForFunctional(cons) // Only needed if onesided

    var ids 
    if (cons.selection) {
      ids = cons.selection.idlistforgrade(0) // TODO: Handle other than point constraints
    } else ids = 0...ncol

    var s = Sparse(ndof*ncol,ids.count())

    for (id, k in ids) {
      var scale=1
      if (cons.onesided && val[0, id]>0) scale=0

      for (x, j in grad.column(id)) s[id*ndof+j,k]=scale*x
    }

    return s 
  }

  constraintGradient() {
    var cgrad = []
    for (cons in self.constraints()) {
      var grad=self.gradientForFunctional(cons)
      _columnize(grad)
      cgrad.append(grad)      
    }

    for (cons in self.localConstraints()) { 
      var grad = self._localConstraintGradient(cons) 
      cgrad.append(grad)
    }

    return cgrad 
  }
}