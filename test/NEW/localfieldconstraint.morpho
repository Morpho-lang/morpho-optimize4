// Local value constraints on fields

import optimize4
import meshtools
import plot 

import "xproblemadapter.morpho"

var mb = MeshBuilder() 
mb.addvertex([0,0])
mb.addvertex([2,0])
mb.addvertex([0,2])
mb.addedge([0,1])
mb.addedge([1,2])
mb.addedge([2,0])
var m = mb.build() 

// Create a field to optimize
var f = Field(m, grade=1)
f[1,0]=-1
f[1,1]=2
f[1,2]=2

// Reference field 
var fref = Field(m, grade=1)
for (v, id in fref) fref[1,id]=1+id

// Zero field 
var fzero = Field(m, grade=1)

// Sums the values in a scalar field; useful for implementing local field constraints
class ScalarFieldTotal {
  init(field, ref, grade=0) {
    self.field = field
    self.ref = ref 
    self.grade = grade
  }

  integrand(mesh) {
    return (self.field-self.ref).linearize().transpose() 
  }

  integrand(mesh, Selection sel) {
    var out = Matrix(1,mesh.count(self.grade))
    for (id in sel.idlistforgrade(self.grade)) {
      out[0,id]=self.field[self.grade,id]
    }
    return out 
  }

  total(mesh) {
    var tot = self.integrand(mesh).sum() 
    return tot 
  }

  total(mesh, Selection sel) {
    var sum = 0
    for (id in sel.idlistforgrade(self.grade)) {
      sum+=self.field[self.grade, self.id]
    }
    return sum 
  }

  gradient(mesh) { // Does not depend on mesh positions
    return 0*mesh.vertexmatrix() 
  }

  fieldgradient(f, mesh) {
    if (f==self.field) return self.field.op(fn (_) 1) // All derivatives are 1 
    if (f==self.ref) return self.ref.op(fn (_) -1) // All derivatives are -1 
    return nil 
  }

  fieldgradient(f, mesh, Selection sel) {
    var out = 0*f
    for (id in sel.idlistforgrade(self.grade)) {
      if (f==self.field) out[self.grade,id]=1
      if (f==self.ref) out[self.grade,id]=-1
    }
    return out
  }
}

// Test problem to ensure they're enforced 
var problem = OptimizationProblem(m) 

var lft = ScalarFieldTotal(f, fzero, grade=1) 
problem.addenergy(lft)

var lfcons = ScalarFieldTotal(f, fref, grade=1) 
problem.addlocalconstraint(lfcons, onesided=true, field=f) 

var adapt = XProblemAdapter(problem, f)

var control = PenaltyController(adapt, controller=ConjugateGradientController)
control.optimize(20)

print adapt.get() 