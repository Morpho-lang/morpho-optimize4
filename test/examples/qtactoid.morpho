// Tactoid with q tensor

import meshgen
import plot
import povray
import optimize4

/* ------------------------------------------------
 * Functions to construct and reconstruct q-tensors 
 * ------------------------------------------------ */

// The q tensor [ Qxx Qxy Qxz ]   
//              [ Qxy Qyy Qyz ]  = S (n \outer n - I/3)
//              [ Qxz Qyz Qzz ]
// is symmetric and traceless. Here, we are interested in scenarios where n is in the x-y
// plane, hence Qxz, Qyz, = 0, Qzz = -1/3 and Qyy = 1/3 - Qxx; hence there remain 2 
// independent components: [ Qxx, Qxy ] and we will represent these as a "q-vector". 

// Reconstruct Q-tensor from the q-vector 
fn reconstructQ(qv) {
  return Matrix( [ [ qv[0], qv[1]      , 0    ], 
                   [ qv[1], 1/3 - qv[0], 0    ],
                   [ 0,     0,           -1/3 ] ])
}

// Reconstruct q-vector from a Q-tensor
fn reconstructqv(Q) {
  return Matrix([ Q[0,0], Q[0,1]])
}

// Function to get the scalar order parameter S from the Q-tensor
fn qtoorder(qv) {
  var Q = reconstructQ(qv)
  var ev = Q.eigenvalues()
  return 3*max(ev)/2
}

// Reconstruct director from Q-tensor
fn qtodirector(qv) {
  var Q = reconstructQ(qv)
  var es = Q.eigensystem()
  var order = es[0].order()       // Find largest eigenvalue
  var n = es[1].column(order[-1]) // Return associated eigenvector
  n/=n.norm()
  return n 
}

// Construct a Q tensor from S and n 
fn constructQ(S, n) {
  return S*(n.outer(n) - IdentityMatrix(3)/3)
}

/* ------------------------------------------------
 * Visualization
 * ------------------------------------------------ */

/* Function to visualize a director field
This function returns a `Graphics()` object that has the director field visualized in the form of cylinders. Here,
1. m is the mesh
2. nn is a director field (get this from the Q-vector)
3. dl is the half-length of the cylinders to be drawn. 
4. aspectratio (optional argument) is the aspect ratio of the cylinders. (default is 0.3 here)
*/
fn visualizeDirector(m, nn, dl, aspectratio=0.3) {
  var v = m.vertexmatrix()
  var nv = v.dimensions()[1]
  var g = Graphics()
  for (i in 0...nv) {
    var x = v.column(i)
    g.display(Cylinder(x-nn[i]*dl, x+nn[i]*dl, aspectratio=aspectratio, color=Brown))
  }
  return g
}

/* ------------------------------------------------
 * Example problem  
 * ------------------------------------------------ */

class QTactoid {
  init() {
    self.Alandau = 1000  // L1 
    self.alpha   = 0.042*self.Alandau   // N m^-2 K^-1
    self.b       = -0.64*self.Alandau   // N m^-2
    self.c       = 0.35*self.Alandau    // N m^-2
    self.deltaT  = -0.1
    self.a       = self.alpha*self.deltaT

    // Calculate equilibrium value of S from landau polynomial 
    self.S0      = (-self.b + sqrt(self.b^2 - 24*self.a*self.c))/(4*self.c)

    // Elastic constants
    self.L1      = 1

    // Cholesteric constants
    // var pitch  = Pi/2 // between 0 and 2pi
    self.L4      = 0

    self.tau     = 10    // Surface tension
    self.omega   = 0.01  // Anchoring parameter
  }

  initialMesh() { 
    var dom = CircularDomain([0,0],1)
    var mg = MeshGen(dom, [-1..1:0.4, -1..1:0.4], quiet=true)
    self.mesh = mg.build()
    self.mesh.addgrade(1)

    // Rescale 
    var areainit = Area().total(self.mesh)
    var xscale = sqrt(areainit)
    for (id in 0...self.mesh.count()) {
      var x = self.mesh.vertexposition(id)
      self.mesh.setvertexposition(id, x/xscale)
    }

    return self.mesh
  }

  initialField() { 
    self.q = Field(self.mesh, fn (x,y) reconstructqv(constructQ(self.S0, Matrix([1,0,0])))) 
  }

  initialSelection() {
    self.bnd = Selection(self.mesh, boundary=true)
  }

  buildProblem() { 
    // Optimization Problem
    self.problem = OptimizationProblem(self.mesh)

    // Landau expansion integrand
    fn landau(x, qv) {
      var u=qv.inner(qv)-qv[0]/3

      var trQ2 = 2*(u+1/9)
      var trQ3 = u

      return self.alpha*self.deltaT*trQ2 + (2*self.b/3)*trQ3 + self.c*trQ2*trQ2/2
    }

    var I3 = IdentityMatrix(3)/3

    // Anchoring functional integrand
    fn anchoring(x, qv) {
      var Q = reconstructQ(qv)
      var t = tangent() // 2D vector 
      var tt = Matrix([t[0], t[1], 0])
      var Qs = self.S0*(tt.outer(tt)-I3)
      var ww = (Q-Qs).norm()
      return ww*ww
    }

    // The bulk free energy is now the area-integral of the landau functional with the field input being q_tensor
    var bulk = AreaIntegral(landau, self.q)
    self.problem.addenergy(bulk) // no prefactors // correct 1/17

    // The elastic energy is the grad-squared of the q-tensor
    var elastic = GradSq(self.q)
    self.problem.addenergy(elastic, prefactor = self.L1) // correct 1/17

    // Surface energy
    var surf = Length()
    self.problem.addenergy(surf, selection=self.bnd, prefactor = self.tau) // surface tension

    // Anchoring energy
    var anchor = LineIntegral(anchoring, self.q)
    self.problem.addenergy(anchor, selection=self.bnd, prefactor = self.tau*self.omega/2)

    // Area constraint 
    var area = Area() 
    self.problem.addconstraint(area)
  }

  buildAdapter() { 
    self.adapter = ProblemAdapter(self.problem, self.mesh, self.q)
    return self.adapter 
  }

  build() { // Setup the problem and return an Adapter
    self.initialMesh()
    self.initialField()
    self.initialSelection()
    self.buildProblem()
    return self.buildAdapter()
  }

  refine(adaptive=true) {
    var mr = MeshRefiner([self.mesh, self.q, self.bnd]) 
    var refmap = mr.refine()

    self.mesh = refmap[self.mesh]
    self.q = refmap[self.q]
    self.bnd = refmap[self.bnd]

    // Remake the problem and the adapter
    self.buildProblem()
    return self.buildAdapter()
  }

  visualize() { 
    var m = ChangeMeshDimension(self.mesh, 3)

    // Convert the q-tensor to the director and order
    var nn = Field(m, Matrix([1,0,0])) // Initialize to some vector
    // var nn = Field(m, Matrix([0,1,0])) // Initialize to some vector
    for (i in 0...m.count()) nn[i]=qtodirector(self.q[i])

    var S = Field(m, 0) // Initialize to a scalar
    for (i in 0...m.count()) S[i]=qtoorder(self.q[i])

    // Plot the scalar order field
    var sbp = [1.5,0,0]

    // Visualize the scalar order parameter
    var splot = plotfield(S, style="interpolate", scalebar=ScaleBar(posn=sbp))

    // Find the mean edge length to 
    var dl = 0.125*Length.total(m)/m.count()

    // Plot the director using the visualize function we wrote above
    var gnn=visualizeDirector(m, nn, dl)

    return splot + gnn
  }
}
