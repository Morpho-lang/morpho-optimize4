// Thomson problem of arranging charges on a sphere
// to minimize the electrostatic energy
// Showcases: MeshBuilder, PairwisePotential, ScalarPotential
import meshtools
import plot
import optimize4
import functionals
import "problemadapter.morpho"

var Np = 200 // Number of particles

// Create the mesh, which consists of Np random points each representing
// a charge on the unit sphere.
var build = MeshBuilder()
for (i in 1..Np) {
  var x = Matrix([2*random()-1, 2*random()-1, 2*random()-1])
  x/=x.norm() // Project onto unit sphere
  build.addvertex(x)
}
var mesh = build.build() // Tell the MeshBuilder to build the mesh

// Specify the problem
var problem = OptimizationProblem(mesh)

// The particle repel one another by a Coulomb potential.
// We supply the potential and it's derivative wrt r as anonymous functions.
var lv = PairwisePotential(fn (r) 1/r, fn (r) -1/r^2)
problem.addenergy(lv)

// Constrain the particles on the unit sphere via a level set constraint.
// The level set function and its gradient are supplied as anonymous functions.
var lsph = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-1, fn (x,y,z) Matrix([2*x, 2*y, 2*z]))
problem.addlocalconstraint(lsph)

// Set up the optimizer to optimize this problem wrt the mesh vertex positions.
var adapt = ProblemAdapter(problem, mesh)

var control = PenaltyController(adapt)
control.optimize(50)

// Visualize the results
var g = Graphics()
for (i in 0...mesh.count()) {
  // Display each particle as a sphere
  g.display(Sphere(mesh.vertexposition(i),1/sqrt(Np)))
}

Show(g) // Open up the viewer application
