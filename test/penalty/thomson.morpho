// Thomson problem demonstrating local equality constraints

import meshtools 
import optimize4
import functionals
import plot 

var Np = 100 // Number of particles

var L = 100

// Create the mesh, which consists of Np random points each representing
// a charge on the unit sphere.
var build = MeshBuilder()
for (i in 1..Np) {
  var x = Matrix([2*random()-1, 2*random()-1, 2*random()-1])
  x/=x.norm() // Project onto unit sphere
  build.addvertex(x)
}
var mesh = build.build() // Tell the MeshBuilder to build the mesh

// Specify the problem
var problem = OptimizationProblem(mesh)

var lv = PairwisePotential(fn (r) 1/r, fn (r) -1/r^2)
problem.addenergy(lv)

var lback = ScalarPotential(fn (x,y,z) x^2+y^2+z^2)
problem.addenergy(lback, prefactor=L)

var lsph = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-1)
problem.addlocalconstraint(lsph)

var adapt = MeshAdapter(problem, mesh) 

var control = PenaltyController(adapt)
control.optimize(15) 

print adapt.value() - L*lback.total(mesh)

var g = Graphics()
for (i in 0...mesh.count()) {
  g.display(Sphere(mesh.vertexposition(i),1/sqrt(Np)))
}
Show(g) 
